%% Get channels we nominally stimmed
do_chop = 1;

%% out name
if do_chop == 1
    out_filename = 'stim_info_chop.mat';
else
    out_filename = 'stim_info.mat';
end

%% Updated pipeline to run through all patients in an csv file

locations = cceps_files;
data_folder = locations.data_folder;
results_folder = locations.results_folder;
out_folder = [results_folder,'other/'];

pwfile = locations.pwfile;
login_name = locations.loginname;
script_folder = locations.script_folder;
results_folder = locations.results_folder;

% add paths
addpath(genpath(script_folder));
if isempty(locations.ieeg_folder) == 0
    addpath(genpath(locations.ieeg_folder));
end

if ~exist(out_folder,'dir'), mkdir(out_folder); end

%% Load patient list
if do_chop == 1
    chop_names = cell(50,1);
    for i = 1:length(chop_names)
        if i <10
            chop_names{i} = sprintf('CHOPCCEP_00%d',i);
        else
            chop_names{i} = sprintf('CHOPCCEP_0%d',i);
        end
    end
    ptT.ieeg_file
else
    ptT = readtable([data_folder,'master_pt_list.xlsx']);
end

%% Parse instances with multiple files
for i = 1:height(ptT)
    % Check if the name contains a comma
    if contains(ptT.ieeg_filename{i}, ',')
        % Split the string by comma and convert to cell array
        ptT.ieeg_filename{i} = strsplit(ptT.ieeg_filename{i}, ',');
    end
end

%% Loop through patients
for i = 1:height(ptT)
    fprintf('\nDoing patient %d of %d...\n',i,height(ptT));
    name = ptT.HUPID{i};
    filenames = ptT.ieeg_filename{i};
    curr_stim_anns = {};
    curr_stim_chs = {};
    curr_all_chs = {};
    
    %% Loop over files
    if iscell(filenames)
        mult_files = 1;
        nfiles = length(filenames);
    else
        mult_files = 0;
        nfiles = 1;
    end
    for f = 1:nfiles

        if mult_files == 1
            filename = filenames{f};
        else
            filename = filenames;
        end

        %% Load ieeg file
        server_count = 0;
        % while loop in case of random server errors
        while 1
            server_count = server_count + 1;
            if server_count > 50
                error('Too many server calls')
        
            end
        
            try session = IEEGSession(filename,login_name,pwfile);
        
            catch ME
                if contains(ME.message,'503') || contains(ME.message,'504') || ...
                        contains(ME.message,'502') || contains(ME.message,'500')
                    fprintf('Failed to retrieve ieeg.org data, trying again (attempt %d)\n',server_count+1); 
                    continue
                else
                    ME
                    error('Non-server error');
                    
                end
                
            end
        
            break
        end

        %% Get metadata

        % Get annotations
        n_layers = length(session.data.annLayer);
        all_anns = {};
        
        for l = 1:n_layers
            curr_ann_count = 0;
            while 1 % ieeg only lets you pull 250 annotations at a time
                if curr_ann_count == 0
                    a=session.data.annLayer(l).getEvents(0);
                else
                    a=session.data.annLayer(l).getNextEvents(a(curr_ann_count));
                end
                curr_ann_count = length(a);
                for k = 1:length(a)
                    all_anns(end+1,:) = ...
                        {l, a(k).start/(1e6), a(k).stop/(1e6), a(k).type, a(k).description};
                end
                if isempty(a), break; end
            end
        end
        aT = cell2table(all_anns,'VariableNames',{'Layer_num','Start','Stop','Type','Description'});
        
        % Get other info
        chLabels = session.data.channelLabels(:,1);
        chLabels = remove_leading_zeros(chLabels);
        nchs = size(chLabels,1);
        duration = session.data.rawChannels(1).get_tsdetails.getDuration/(1e6);

        index = startsWith(aT.Type, 'Closed relay') | startsWith(aT.Type,'Start Stimulation');
        filteredStartTimes = aT.Start(index);
        [minTime, idx] = min(filteredStartTimes); % Find the minimum start time from the filtered data
        start_time = minTime - 10;
        relevant_times = [start_time,duration]; % full

        %% Get stim channels
        [stim_anns,stim_chs] = get_stim_anns(aT,relevant_times);
        curr_stim_anns = [curr_stim_anns;stim_anns];
        curr_stim_chs = [curr_stim_chs;stim_chs];
        curr_all_chs = [curr_all_chs;chLabels];

        % delete the ieeg session
        session.delete;

    end

    %% Reconcile across files
    % Take unique
    stim_anns = unique(curr_stim_anns);
    stim_chs = unique(curr_stim_chs);
    all_chs = unique(curr_all_chs);
    got_stim = ismember(all_chs,stim_chs);
    nstim = length(stim_chs);

    %% Find non intracranial
    non_intracranial = find_non_intracranial(all_chs);
    intracranial_chs = all_chs(~non_intracranial);

    %% Add to structure
    pt(i).name = name;
    pt(i).filenames = filenames;
    pt(i).stim_anns = stim_anns;
    pt(i).stim_chs = stim_chs;
    pt(i).got_stim = got_stim;
    pt(i).all_chs = all_chs;
    pt(i).nchs = length(intracranial_chs);
    pt(i).nstim = nstim;
    pt(i).non_intracranial = non_intracranial;
    pt(i).intracranial_chs = intracranial_chs;

    %% Save structure
    save([out_folder,out_filename],'pt');

end

